//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rhino.Tools.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Rhino.Tools.Resources.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class &quot;{0}&quot; not found..
        /// </summary>
        internal static string msg_class_not_found {
            get {
                return ResourceManager.GetString("msg.class.not.found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;&apos;t open file &quot;{0}&quot;..
        /// </summary>
        internal static string msg_couldnt_open {
            get {
                return ResourceManager.GetString("msg.couldnt.open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;&apos;t open URL &quot;{0}&quot;: {1}..
        /// </summary>
        internal static string msg_couldnt_open_url {
            get {
                return ResourceManager.GetString("msg.couldnt.open.url", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;&apos;t read source file &quot;{0}&quot;: {1}..
        /// </summary>
        internal static string msg_couldnt_read_source {
            get {
                return ResourceManager.GetString("msg.couldnt.read.source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected a string argument..
        /// </summary>
        internal static string msg_expected_string_arg {
            get {
                return ResourceManager.GetString("msg.expected.string.arg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &quot;{0}&quot; is not a valid js file name..
        /// </summary>
        internal static string msg_extension_not_js {
            get {
                return ResourceManager.GetString("msg.extension.not.js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}.
        /// </summary>
        internal static string msg_format1 {
            get {
                return ResourceManager.GetString("msg.format1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to line {0}: {1}.
        /// </summary>
        internal static string msg_format2 {
            get {
                return ResourceManager.GetString("msg.format2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot;, line {1}: {2}.
        /// </summary>
        internal static string msg_format3 {
            get {
                return ResourceManager.GetString("msg.format3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Command                Description 
        ///=======                =========== 
        ///help()                 Display usage and help messages. 
        ///defineClass(className) Define an extension using the Java class 
        ///                       named with the string argument. 
        ///                       Uses ScriptableObject.defineClass(). 
        ///load([&quot;foo.js&quot;, ...])  Load JavaScript source files named by 
        ///                       string arguments. 
        ///loadClass(className)   Load a class named by a string argument. 
        ///                      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string msg_help {
            get {
                return ResourceManager.GetString("msg.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StringIdMap: {0}
        ///For more information, try
        ///java org.mozilla.javascript.tools.idswitch.StringIdMap --help.
        /// </summary>
        internal static string msg_idswitch_bad_invocation {
            get {
                return ResourceManager.GetString("msg.idswitch.bad_invocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option {0}.
        /// </summary>
        internal static string msg_idswitch_bad_option {
            get {
                return ResourceManager.GetString("msg.idswitch.bad_option", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option letter {0}.
        /// </summary>
        internal static string msg_idswitch_bad_option_char {
            get {
                return ResourceManager.GetString("msg.idswitch.bad_option_char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String switch tag {0} is not allowed here.
        /// </summary>
        internal static string msg_idswitch_bad_tag_order {
            get {
                return ResourceManager.GetString("msg.idswitch.bad_tag_order", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of file inside tag {0}.
        /// </summary>
        internal static string msg_idswitch_file_end_in_switch {
            get {
                return ResourceManager.GetString("msg.idswitch.file_end_in_switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StringIdMap: IO error, {0}.
        /// </summary>
        internal static string msg_idswitch_io_error {
            get {
                return ResourceManager.GetString("msg.idswitch.io_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tag {0} can not be used as end tag.
        /// </summary>
        internal static string msg_idswitch_no_end_usage {
            get {
                return ResourceManager.GetString("msg.idswitch.no_end_usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End for tag {0} can not contain value.
        /// </summary>
        internal static string msg_idswitch_no_end_with_value {
            get {
                return ResourceManager.GetString("msg.idswitch.no_end_with_value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File argument should be given.
        /// </summary>
        internal static string msg_idswitch_no_file_argument {
            get {
                return ResourceManager.GetString("msg.idswitch.no_file_argument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tag {0} can not contain value.
        /// </summary>
        internal static string msg_idswitch_no_value_allowed {
            get {
                return ResourceManager.GetString("msg.idswitch.no_value_allowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string {0} is used second time in the switch code. Previous occurrence was at line {1}.
        /// </summary>
        internal static string msg_idswitch_same_string {
            get {
                return ResourceManager.GetString("msg.idswitch.same_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many arguments are given.
        /// </summary>
        internal static string msg_idswitch_too_many_arguments {
            get {
                return ResourceManager.GetString("msg.idswitch.too_many_arguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: java org.mozilla.javascript.tools.idswitch.StringIdMap [OPTIONS] JAVA_SOURCE_FILE
        ///Generates efficient string dispatch code in JAVA_SOURCE_FILE.
        ///The resulting Java source fragment replaces the old dispatch code.
        ///If JAVA_SOURCE_FILE is -, standard input is used for Java source and the
        ///result is sent to standard output.
        ///
        ///  -h, --help          display this help and exit
        ///      --version       display version information and exit
        ///
        ///Note: the original file will be overwritten without any backup acti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string msg_idswitch_usage {
            get {
                return ResourceManager.GetString("msg.idswitch.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to org.mozilla.javascript.tools.idswitch.StringIdMap version 0.2.
        /// </summary>
        internal static string msg_idswitch_version {
            get {
                return ResourceManager.GetString("msg.idswitch.version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &quot;{0}&quot; is not a valid class file name..
        /// </summary>
        internal static string msg_invalid_classfile_name {
            get {
                return ResourceManager.GetString("msg.invalid.classfile.name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Didn&apos;&apos;t understand &quot;{1}&quot;. 
        ///For more information, try java {0} -h.
        /// </summary>
        internal static string msg_jsc_bad_usage {
            get {
                return ResourceManager.GetString("msg.jsc.bad.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: java {0} [OPTION]... SOURCE...
        ///Valid options are: 
        ///  -version VERSION   Use the specified language version.
        ///                       VERSION should be one of 100|110|120|130|140|150|160|170.
        ///  -opt LEVEL         Use optimization with the specified level.
        ///                       LEVEL should be one of 0..9.
        ///  -debug, -g         Include debug information.
        ///  -nosource          Do not include source to function objects.
        ///                       It makes f.toString() useless and violates ECMAScript
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string msg_jsc_usage {
            get {
                return ResourceManager.GetString("msg.jsc.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &quot;{0}&quot; not found..
        /// </summary>
        internal static string msg_jsfile_not_found {
            get {
                return ResourceManager.GetString("msg.jsfile.not.found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot compile multiple js files to &quot;{0}&quot;..
        /// </summary>
        internal static string msg_multiple_js_to_file {
            get {
                return ResourceManager.GetString("msg.multiple.js.to.file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument to loadClass() must be the name of a class that implements the Script interface. Class files generated by compiling scripts will implement Script..
        /// </summary>
        internal static string msg_must_implement_Script {
            get {
                return ResourceManager.GetString("msg.must.implement.Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument to defineClass() must be the name of a class that implements the Scriptable interface..
        /// </summary>
        internal static string msg_must_implement_Scriptable {
            get {
                return ResourceManager.GetString("msg.must.implement.Scriptable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file name must be specified to compile..
        /// </summary>
        internal static string msg_no_file {
            get {
                return ResourceManager.GetString("msg.no.file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must have the org.mozilla.javascript.optimizer package available to compile to class files..
        /// </summary>
        internal static string msg_no_opt {
            get {
                return ResourceManager.GetString("msg.no-opt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid package name..
        /// </summary>
        internal static string msg_package_name {
            get {
                return ResourceManager.GetString("msg.package.name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first argument to runCommand must be a command name..
        /// </summary>
        internal static string msg_runCommand_bad_args {
            get {
                return ResourceManager.GetString("msg.runCommand.bad.args", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of the env property of option object for runCommnad must be an object..
        /// </summary>
        internal static string msg_runCommand_bad_env {
            get {
                return ResourceManager.GetString("msg.runCommand.bad.env", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong scope object for shell function: {0}.
        /// </summary>
        internal static string msg_shell_bad_function_scope {
            get {
                return ResourceManager.GetString("msg.shell.bad.function.scope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option &quot;{0}&quot;.
        /// </summary>
        internal static string msg_shell_invalid {
            get {
                return ResourceManager.GetString("msg.shell.invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to readFile require at least file path to be specified.
        /// </summary>
        internal static string msg_shell_readFile_bad_args {
            get {
                return ResourceManager.GetString("msg.shell.readFile.bad.args", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to readUrl require at least file path to be specified.
        /// </summary>
        internal static string msg_shell_readUrl_bad_args {
            get {
                return ResourceManager.GetString("msg.shell.readUrl.bad.args", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to seal function can only be applied to objects.
        /// </summary>
        internal static string msg_shell_seal_not_object {
            get {
                return ResourceManager.GetString("msg.shell.seal.not.object", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to seal function supports only sealing of ScriptableObject instances.
        /// </summary>
        internal static string msg_shell_seal_not_scriptable {
            get {
                return ResourceManager.GetString("msg.shell.seal.not.scriptable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: java {0} [options...] [files]
        ///Valid options are:
        ///    -?, -help          Displays help messages.
        ///    -w                 Enable warnings.
        ///    -version 100|110|120|130|140|150|160|170|180
        ///                       Set a specific language version.
        ///    -opt [-1|0-9]      Set optimization level.
        ///    -f script-filename Execute script file, or &quot;-&quot; for interactive.
        ///    -e script-source   Evaluate inline script.
        ///    -modules [uri]     Add a single path or URL element to the CommonJS
        ///                     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string msg_shell_usage {
            get {
                return ResourceManager.GetString("msg.shell.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument to spawn() must be a function or script..
        /// </summary>
        internal static string msg_spawn_args {
            get {
                return ResourceManager.GetString("msg.spawn.args", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uncaught JavaScript runtime exception: {0}.
        /// </summary>
        internal static string msg_uncaughtEcmaError {
            get {
                return ResourceManager.GetString("msg.uncaughtEcmaError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exception from uncaught JavaScript throw: {0}.
        /// </summary>
        internal static string msg_uncaughtJSException {
            get {
                return ResourceManager.GetString("msg.uncaughtJSException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to warning: {0}.
        /// </summary>
        internal static string msg_warning {
            get {
                return ResourceManager.GetString("msg.warning", resourceCulture);
            }
        }
    }
}
